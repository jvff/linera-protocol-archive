package linera:app;

interface mock-system-api {
    mocked-chain-id: func() -> chain-id;
    mocked-application-id: func() -> application-id;
    mocked-application-parameters: func() -> list<u8>;
    mocked-read-system-balance: func() -> amount;
    mocked-read-system-timestamp: func() -> timestamp;
    mocked-log: func(message: string, level: log-level);
    mocked-load: func() -> list<u8>;
    mocked-load-and-lock: func() -> option<list<u8>>;
    mocked-store-and-unlock: func(value: list<u8>) -> bool;
    mocked-lock: func() -> bool;
    mocked-unlock: func() -> bool;
    mocked-read-multi-values-bytes: func(keys: list<list<u8>>) -> list<option<list<u8>>>;
    mocked-read-value-bytes: func(key: list<u8>) -> option<list<u8>>;
    mocked-find-keys: func(prefix: list<u8>) -> list<list<u8>>;
    mocked-find-key-values: func(prefix: list<u8>) -> list<tuple<list<u8>, list<u8>>>;
    mocked-write-batch: func(operations: list<write-operation>);
    mocked-try-query-application: func(application: application-id, query: list<u8>) -> result<list<u8>, string>;

    record block-height {
        inner0: u64,
    }

    enum log-level {
        error,
        warn,
        info,
        debug,
        trace,
    }

    variant write-operation {
        delete(list<u8>),
        delete-prefix(list<u8>),
        put(tuple<list<u8>, list<u8>>),
    }

    record amount {
        inner0: u128,
    }

    type u128 = tuple<u64, u64>;

    record bytecode-id {
        message-id: message-id,
    }

    record timestamp {
        inner0: u64,
    }

    record crypto-hash {
        part1: u64,
        part2: u64,
        part3: u64,
        part4: u64,
    }

    record message-id {
        chain-id: chain-id,
        height: block-height,
        index: u32,
    }

    record chain-id {
        inner0: crypto-hash,
    }

    record application-id {
        bytecode-id: bytecode-id,
        creation: message-id,
    }
}
