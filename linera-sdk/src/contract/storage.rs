// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//! Types for the exported futures for the contract endpoints.
//!
//! Each type is called by the code generated by [`wit-bindgen-guest-rust`] when the host calls the guest
//! Wasm module's respective endpoint. This module contains the code to forward the call to the
//! contract type that implements [`Contract`].

use crate::{
    views::{AppStateStore, ViewStorageContext},
    Contract, SimpleStateStorage, ViewStateStorage,
};
use async_trait::async_trait;
use futures::TryFutureExt;
use linera_views::{
    batch::Batch,
    common::{ReadableKeyValueStore, WritableKeyValueStore},
    views::{RootView, View},
};
use serde::{de::DeserializeOwned, Serialize};
use std::future::Future;

/// The storage APIs used by a contract.
#[async_trait]
pub trait ContractStateStorage<Application>
where
    Application: Contract,
{
    /// Loads the `Application` state.
    async fn load() -> Application::State;

    /// Stores the `Application` state.
    async fn store(state: &mut Application::State);

    /// Executes an `operation` with the `Application` state.
    ///
    /// The state is only stored back in storage if the `operation` succeeds. Otherwise, the error
    /// is returned as a [`String`].
    async fn execute_with_state<Operation, AsyncOperation, Success, Error>(
        operation: Operation,
    ) -> Result<Success, String>
    where
        Operation: FnOnce(Application) -> AsyncOperation,
        AsyncOperation: Future<Output = Result<(Application, Success), Error>> + Send,
        Application: Send,
        Operation: Send,
        Success: Send + 'static,
        Error: ToString + 'static,
    {
        let state = Self::load().await;
        let application = Application::new(state)
            .await
            .map_err(|error| error.to_string())?;

        operation(application)
            .and_then(|(mut application, result)| async move {
                Self::store(application.state_mut()).await;
                Ok(result)
            })
            .await
            .map_err(|error| error.to_string())
    }
}

#[async_trait]
impl<Application> ContractStateStorage<Application> for SimpleStateStorage<Application>
where
    Application: Contract,
    Application::State: Default + DeserializeOwned + Serialize + Send + 'static,
{
    async fn load() -> Application::State {
        let maybe_bytes = AppStateStore
            .read_value_bytes(&[])
            .await
            .expect("Failed to read application state bytes");

        if let Some(bytes) = maybe_bytes {
            bcs::from_bytes(&bytes).expect("Failed to deserialize application state")
        } else {
            Application::State::default()
        }
    }

    async fn store(state: &mut Application::State) {
        let mut batch = Batch::new();

        batch
            .put_key_value(vec![], &state)
            .expect("Failed to serialize application state");

        AppStateStore
            .write_batch(batch, &[])
            .await
            .expect("Failed to store application state bytes");
    }
}

#[async_trait]
impl<Application> ContractStateStorage<Application> for ViewStateStorage<Application>
where
    Application: Contract,
    Application::State: RootView<ViewStorageContext> + Send + 'static,
{
    async fn load() -> Application::State {
        Application::State::load(ViewStorageContext::default())
            .await
            .expect("Failed to load application state")
    }

    async fn store(state: &mut Application::State) {
        state
            .save()
            .await
            .expect("Failed to store application state")
    }
}
