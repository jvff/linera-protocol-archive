chain-id: func() -> chain-id
application-id: func() -> application-id
read-system-balance: func() -> system-balance

resource load {
    static new: func() -> load
    poll: func() -> poll-load
}

resource load-and-lock {
    static new: func() -> load-and-lock
    poll: func() -> poll-load
}

variant poll-load {
    pending,
    ready(expected<list<u8>, string>),
}

resource read-key-bytes {
    static new: func(key: list<u8>) -> read-key-bytes
    poll: func() -> poll-read-key-bytes
}

variant poll-read-key-bytes {
    pending,
    ready(expected<option<list<u8>>, string>),
}

resource find-stripped-keys {
    static new: func(prefix: list<u8>) -> find-stripped-keys
    poll: func() -> poll-find-stripped-keys
}

variant poll-find-stripped-keys {
    pending,
    ready(expected<list<list<u8>>, string>),
}

resource find-stripped-key-values {
    static new: func(prefix: list<u8>) -> find-stripped-key-values
    poll: func() -> poll-find-stripped-key-values
}

variant poll-find-stripped-key-values {
    pending,
    ready(expected<list<tuple<list<u8>,list<u8>>>, string>),
}

variant write-operation {
    delete(list<u8>),
    deleteprefix(tuple<list<u8>,list<u8>>),
    put(tuple<list<u8>,list<u8>>),
}



store-and-unlock: func(value: list<u8>) -> bool

resource try-call-application {
    static new: func(
        authenticated: bool,
        application: application-id,
        argument: list<u8>,
        forwarded-sessions: list<session-id>,
    ) -> try-call-application

    poll: func() -> poll-call-result
}

resource try-call-session {
    static new: func(
        authenticated: bool,
        session: session-id,
        argument: list<u8>,
        forwarded-sessions: list<session-id>,
    ) -> try-call-application

    poll: func() -> poll-call-result
}

variant poll-call-result {
    pending,
    ready(expected<call-result, string>),
}

record call-result {
    value: list<u8>,
    sessions: list<session-id>,
}

record session-id {
    application-id: application-id,
    kind: u64,
    index: u64,
}

record application-id {
    bytecode: bytecode,
    creation: effect-id,
}

type bytecode = effect-id

record effect-id {
    chain-id: chain-id,
    height: block-height,
    index: u64,
}

type chain-id = hash-value
type block-height = u64

record hash-value {
    part1: u64,
    part2: u64,
    part3: u64,
    part4: u64,
    part5: u64,
    part6: u64,
    part7: u64,
    part8: u64,
}

record system-balance {
    lower-half: u64,
    upper-half: u64,
}
