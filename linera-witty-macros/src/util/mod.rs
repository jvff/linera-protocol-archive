// Copyright (c) Zefchain Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//! Helper types and functions shared between different macro implementations.

mod fields;
mod specialization;

#[cfg(with_wit_export)]
pub use self::specialization::Specialization;
pub use self::{fields::FieldsInformation, specialization::Specializations};
use heck::ToKebabCase;
use proc_macro2::{Span, TokenStream};
use proc_macro_error::abort;
use quote::ToTokens;
use std::hash::{Hash, Hasher};
use syn::{
    parse::{self, Parse, ParseStream},
    punctuated::Punctuated,
    DeriveInput, Ident, Lit, LitStr, MetaNameValue, Token,
};

/// Returns the package and namespace for the WIT interface generated by an attribute macro.
///
/// Requires a `package` to be specified in `attribute_parameters` and can use a specified
/// `namespace` or infer it from the `type_name`.
pub fn extract_namespace(
    attribute_parameters: proc_macro::TokenStream,
    type_name: &Ident,
) -> LitStr {
    let span = Span::call_site();
    let parameters = syn::parse::<AttributeParameters>(attribute_parameters).unwrap_or_else(|_| {
        abort!(
            span,
            r#"Failed to parse attribute parameters, expected either `root = true` \
                or `package = "namespace:package""#
        )
    });

    let package_name = parameters.parameter("package").unwrap_or_else(|| {
        abort!(
            span,
            r#"Missing package name specifier in attribute parameters \
                (package = "namespace:package")"#
        )
    });

    let interface_name = parameters
        .parameter("interface")
        .unwrap_or_else(|| type_name.to_string().to_kebab_case());

    LitStr::new(&format!("{package_name}/{interface_name}"), span)
}

/// Changes the [`DeriveInput`] by replacing some generic type parameters with specialized types.
pub fn apply_specialization_attribute(input: &mut DeriveInput) -> Specializations {
    Specializations::prepare_derive_input(input)
}

/// A type representing the parameters for an attribute procedural macro.
struct AttributeParameters {
    metadata: Punctuated<MetaNameValue, Token![,]>,
}

impl Parse for AttributeParameters {
    fn parse(input: ParseStream) -> parse::Result<Self> {
        Ok(AttributeParameters {
            metadata: Punctuated::parse_terminated(input)?,
        })
    }
}

impl AttributeParameters {
    /// Returns the string value of a parameter named `name`, if it exists.
    pub fn parameter(&self, name: &str) -> Option<String> {
        self.metadata
            .iter()
            .find(|pair| pair.path.is_ident(name))
            .map(|pair| {
                let syn::Expr::Lit(syn::ExprLit {
                    lit: Lit::Str(lit_str),
                    ..
                }) = &pair.value
                else {
                    abort!(&pair.value, "Expected a string literal");
                };

                lit_str.value()
            })
    }
}

/// A helper type to allow comparing [`TokenStream`] instances, allowing it to be used in a
/// [`HashSet`].
pub struct TokensSetItem<'input> {
    string: String,
    tokens: &'input TokenStream,
}

impl<'input> From<&'input TokenStream> for TokensSetItem<'input> {
    fn from(tokens: &'input TokenStream) -> Self {
        TokensSetItem {
            string: tokens.to_string(),
            tokens,
        }
    }
}

impl PartialEq for TokensSetItem<'_> {
    fn eq(&self, other: &Self) -> bool {
        self.string.eq(&other.string)
    }
}

impl Eq for TokensSetItem<'_> {}

impl Hash for TokensSetItem<'_> {
    fn hash<H>(&self, state: &mut H)
    where
        H: Hasher,
    {
        self.string.hash(state)
    }
}

impl ToTokens for TokensSetItem<'_> {
    fn to_tokens(&self, stream: &mut TokenStream) {
        self.tokens.to_tokens(stream)
    }
}
