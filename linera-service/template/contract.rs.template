#![cfg_attr(target_arch = "wasm32", no_main)]

mod state;

use linera_sdk::{{base::WithContractAbi, Contract, ContractRuntime}};
use thiserror::Error;

use self::state::Application;

pub struct ApplicationContract {{
    state: StoreOnDrop<Application>,
    runtime: ContractRuntime<Self>,
}}

linera_sdk::contract!(ApplicationContract);

impl WithContractAbi for ApplicationContract {{
    type Abi = {project_name}::ApplicationAbi;
}}

impl Contract for ApplicationContract {{
    type Error = ContractError;
    type State = Application;
    type Message = ();
    type Parameters = ();
    type InstantiationArgument = ();

    async fn new(state: Self::State, runtime: ContractRuntime<Self>) -> Result<Self, Self::Error> {{
        Ok(ApplicationContract {{
            state: StoreOnDrop(state),
            StoreOnDrop(runtime),
        }})
    }}

    fn state_mut(&mut self) -> &mut Self::State {{
        &mut self.state
    }}

    async fn instantiate(
        &mut self,
        _argument: Self::InstantiationArgument,
    ) -> Result<(), Self::Error> {{
        Ok(())
    }}

    async fn execute_operation(
        &mut self,
        _operation: Self::Operation,
    ) -> Result<Self::Response, Self::Error> {{
        Ok(())
    }}

    async fn execute_message(&mut self, _message: Self::Message) -> Result<(), Self::Error> {{
        Ok(())
    }}
}}

/// An error that can occur during the contract execution.
#[derive(Debug, Error)]
pub enum ContractError {{
    /// Failed to deserialize BCS bytes
    #[error("Failed to deserialize BCS bytes")]
    BcsError(#[from] bcs::Error),

    /// Failed to deserialize JSON string
    #[error("Failed to deserialize JSON string")]
    JsonError(#[from] serde_json::Error),

    // Add more error variants here.
}}
